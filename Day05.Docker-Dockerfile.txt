Day05. Dockerfile 만들기
1. 도커 컨테이너 -> 도커 이미지 : docker commit(사용안하는 방식)
 ($ docker commit mysql-container mysql-image:1.0
  $ docker images
  $ docker run -d --name mysql-image-container -p 3306:3306 mysql-image:1.0)
-----------------------------------------------------------------------------
2. Dockerfile 파일 작성
 1)파일명이 정해져 있습니다. 확장자 없이 Dockerfile로 작성합니다.
   다른 이름을 사용하려면 docker build -f 옵션으로 사용한 이름을 지정해야 합니다.
 2) Dockerfile 파일 구성
   (1) FROM <이미지> : 베이스 이미지 지정.모든 Dockerfile은 반드시 FROM으로 시작합니다.
   (2) ARG <인자> : docker build --build-arg 옵션으로 인자 값을 전달할 수 있습니다.
   (3) ARG <인자=값> : 해당 인자값을 Dockerfile 내부에서 $인자, ${인자} 형식으로 사용할 수 있습니다.
   (4) LABEL maintainer="작성자 정보"
             title="이미지제목"
             version="버전"
             description="이미지개요" : 이미지에 대한 각종 정보를 작성합니다.
   (5) RUN <명령어> : 이미지를 만들 때(image build)실행할 리눅스 명령어를 작성합니다.
   (6) ENV <환경변수> <값> : 환경 변수를 설정합니다. 해당 환경 변수 값을 Dockerfile 내부에서 
                            $환경변수, ${환경변수} 형식으로 사용할 수 있습니다.
   (7) EXPOSE <포트> : 컨테이너를 만들 때 열어 줄 포트 번호를 지정합니다.
   (8) WORKDIR <경로> : 컨테이너에 들어가면 보이는 기본 경로입니다. (docker exec)
   (9) ENTRYPOINT ["커맨드", "인자", ...]: 컨테이너를 실행할 때 자동으로 실행하는 명령어를 작성합니다.
   (10) CMD ["커맨드", "인자", ...] : 컨테이너를 실행할 때 자동으로 실행하는 명령어를 작성합니다.
                                      ENTRYPOINT가 존재하면 주로 CMD에는 "인자"를 작성합니다.
   (11) COPY <src> <desc> : 호스트 파일 또는 디렉터리(src)의 내용을 이미지 내부(desc)로 복사하는 명령어입니다.
   (12)  ADD <src> <desc> : COPY 명령어와 비슷합니다. URL을 제시(src)해서 외부 파일을 복사할 수 있고,
                            호스트 파일이 압축 파일(tar)인 경우 자동으로 압축을 풀어줍니다.

1. 홈 디렉터리에 Dockerfile 만들기
 1)Dockerfile1 (mysql:8.0이미지로 mysql-image:8.0 이미지 만들기)
$ vi Dockerfile1
# 내부 접속

> # MYSQL 이 미 지 기 반 으 로  새 로 운 이 미 지  생성
  FROM mysql:8.0

  #MYSQL 환 경 변 수 설 정
  ENV MYSQL_ROOT_PASSWORD=root
  ENV MYSQL_DATABASE=db_semi
  ENV MYSQL_USER=greenit
  ENV MYSQL_PASSWORD=greenit

  # 컨 테 이 너 포 트 설 정
  EXPOSE 3306

-------------------------------------------------------------------------
 2)Dockerfile2 (ubuntu:22.04 이미지로 openjdk11과 tomcat9.0.98이 설치된 ubuntu-image:22.04 이미지 만들기)
$ vi dockerfile2
# 인 자
ARG VERSION

# 이 미 지 정 보
LABEL maintainer="mgt<chan@gmail.com>" title="Ubuntu On Jdk And Tomcat" version=$VERSION

# 패 키 지 관 리 도 구 apt 업 데 이 트
RUN apt update

# openjdk-11-jdk 패 키 지 설 치
RUN apt install -y openjdk-11-jdk

# wget 패 키 지 설 치
RUN apt install -y wget

# 함 께 설 치 : RUN apt install -y openjdk-11-jdk wget

# tomcat 9.0 다 운 로 드
RUN wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.tar.gz -P /home/tomcat

# 압 축 풀 기
RUN tar -xzvf /home/tomcat/apache-tomcat-9.0.98.tar.gz -C /home/tomcat

# openjdk-11-jdk 환 경 변 수 설 정
ENV JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"

# tomcat 포 트 열 기
EXPOSE 8080

# 작 업 디 렉 터 리 설 정 (docker exec-it container-name bash 명 령 시 작 업 디 렉 터 리 가 열 림 )
WORKDIR /home/tomcat/apache-tomcat-9.0.98

# 실 행 할 명 령 어
CMD ["/home/tomcat/apache-tomcat-9.0.98/bin/catalina.sh", "run"]

-------------------------------------------------------------------------
 3)Dockerfile3 (mysql:8.0 이미지로 semi_data.sql 스크립트 파일을 다운로드 받아 실행한 <계정명>/mysql-image:8.0 이미지 만들기)
$ vi Dockerfile3

# 베 이 스 이 미 지 : 우 분 투 (Debian 계 열 ) 기 반 의 mysql:8.0
FROM mysql:8.0-debian

# 인 자 설 정
ARG ROOT_PASSWORD
ARG USER_PASSWORD
ARG WORK_DIR=/home/mysql

# 환 경 변 수 설 정
ENV MYSQL_ROOT_PASSWORD=$ROOT_PASSWORD
ENV MYSQL_DATABASE=db_semi
ENV MYSQL_USER=greenit
ENV MYSQL_PASSWORD=$USER_PASSWORD
ENV TZ=Asia/Seoul

# 패 키 지 관 리 자 업 데 이 트
RUN apt update

# wget, unzip 패 키 지 설 치
RUN apt install -y wget unzip

# /home/mysql 디 렉 터 리 에 스 크 립 트 압 축 파 일 내 려 받 기
RUN wget --no-check-certificate https://download.blog.naver.com/open/ed78f14a506667d3fc19794b7a94e891306c931f/E9WptMluFKGDbkvpC1U4t9679l45S-bhEwaezr5JmTs6ssVpeOcUkCm_F5ILRZs4iEePhkkW9wWYEqDUQdKRDQ/semi_data.zip -P $WORK_DIR

# 작 업 디 렉 터 리 설 정
WORKDIR $WORK_DIR

# 다 운 로 드 받 은 스 크 립 트 압 축 파 일 에 권 한 주 기
RUN chmod 777 $WORK_DIR/semi_data.zip

# 압 축 풀 기 ( 작 업 디 렉 터 리 아 래 에 data.sql 파 일 이 생 성 됨 )
RUN unzip $WORK_DIR/semi_data.zip

# docker-entrypoint-initdb.d : 컨테이너가 실행될 때 불러올 스크립트 파일이 위치하는 디렉터리
# /home/kjc 디 렉 터 리 에 init-db.sh 스 크 립 트 파 일 을 만들고 /docker-entrypoint-initdb.d 디 렉 터 리 에 복사

# init-db.sh 파 일 이 /home/kjc/semi_data.sql 파 일 을 실 행 하 는 셀 스 크 립 트 코 드 를 가 짐
#COPY<host 경 로 ><container 경 로 >
COPY init-db.sh /docker-entrypoint-initdb.d

# 실 행 할 명 령 어
CMD ["mysqld"]
----------------------------------------------------------
2. 홈 디렉터리에 init-db.sh 파일 만들기
$ vi init-db.sh
# 컨테이너 내부의 /usr/bin/mysql 명령어 실행
# root 계정의 비밀번호 전달
# 데이터베이스 db_semi에/home/mysql/semi_data.sql 스크립트 파일 실행하기
/usr/bin/mysql -u root --password=root db_semi < /home/mysql/semi_data.sql
------
3. 도커파일과 init-db.sh 파일을 이용하여 도커 이미지 빌드 및 확인
(향후 도커허브에 이미지 업로드를 고려하여 이미지 이름 앞에 계정명 추가, 레지스트리명인 docker.io는 생략 가능)
$ docker image build -t docker.io/wocks95/mysql-image:8.0 --build-arg ROOT_PASSWORD=root --build-arg USER_PASSWORD=greenit -f Dockerfile3 .

$ docker images
# 목록 확인

4. 호스트 디렉터리(~/mysql)와 컨테이너 디렉터리(/etc/mysql/conf.d)-(my.cnf 파일로 utf8mb4 환경 설정하는 디렉터리) 마운트 하기 (마운트 바인딩 이용)
 호스트 디렉터리를 컨테이너 디렉터리와 동일한 소유자:그룹으로 변경해야 연결이 가능함.
$ mkdir ~/mysql
$ sudo chown root ~/mysql
$ sudo chgrp root ~/mysql
5. 테이블 데이터 백업을 위한 도커 볼륨 생성
$ docker volume create mysql-vol
6. 컨테이너 실행 및 확인
$ docker run -d --name mysql-container -p 3306:3306 -v mysql-vol:/var/lib/mysql 
-v ~/mysql:/etc/mysql/conf.d --restart=always wocks95/mysql-image:8.0
$ docker ps
7. 호스트 디렉터리(~/mysql)에 my.cnf 파일 만들어서 도커 컨테이너 환경 설정하기
$ sudo vi ~/mysql/my.cnf ↓
----
[client]
default-character-set = utf8mb4
[mysql]
default-character-set = utf8mb4
[mysqldump]
default-character-set = utf8mb4
[mysqld]
init_connect = 'SET collation_connection = utf8_general_ci'
init_connect = 'SET NAMES utf8'
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
skip-character-set-client-handshake
----
8. 도커 컨테이너로 들어가기 (WORKDIR 확인 가능, status로 my.cnf 파일 적용 유무 확인, greenit 계정 접속 가능 여부 확인)
$ docker exec -it mysql-container bash
/home/mysql# mysql -u root -p
Enter password: root
mysql> status
...
Server characterset:    utf8mb4  <<  
Db     characterset:    utf8mb4  <<   my.chf 파일 만들어서 환경 설정한 부분이 여기서 보임
Client characterset:    utf8mb4  <<   
Conn.  characterset:    utf8mb4  <<
...
mysql> GRANT ALL PRIVILEGES ON *.* TO 'greenit'@'%'; << greenit에 권한 주기
mysql> exit
/home/mysql# mysql -u greenit -p
mysql> USE db_semi;
mysql> DESC tbl_user;