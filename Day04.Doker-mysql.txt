20250110 Day04 

MySQL 8.0
 /etc/mysql/conf.d  : 환경설정파일 my.cnf 등록시킬 예정 (인코딩 내용 포함)

 바인드 마운트 방식 (호스트 디렉터리 : 컨테이너 디렉터리) - 직접 자주 사용하는 데이터
 -v ~/mysql:/etc/mysql/conf.d (외부에 연결해둠, 만약에 꺼지더라도 초기화가 안됨)
    ------- ------------------
    kjc:kjc    root:root
  
 /etc/mysql/conf.d 디렉터리의 소유자: 그룹이 root:root이므로 ~/mysql 디렉터리의
 소유자와 그룹을 root로 변경해야함

 ------------------------------------------

 /var/lib/mysql 디렉터리가 mysql의 데이터 저장 디렉터리
 (/etc/my.cnf 환경 설정 파일을 열어보면 확인 가능)

 데이터 디렉터리를 볼륨 처리
 볼륨 마운트 방식 (도커볼륨:컨테이너 디렉터리) - 데이터 저장

 -v mysql-vol:/var/lib/mysql (테이블 데이터 백업해주는 곳)

------------------------------------------------------------------
 환경 변수 : 컨테이너 생성 시 전달하는 변수 값
 -e MYSQL_ROOT_PASSWORD=값
 -e MYSQL_USER=값
 -e MYSQL_PASSWORD=값
 -e TZ=Asia/Seoul
 ------------------------------------------
window의 '서비스'에서 Mysql을 중지해야한다.
그 후 리눅스에 들어오면 순서대로 입력한다.
$ sudo apt install -y lsof
# isof 프로그램을 설치하라는 명령어

$ sudo lsof -i:3306
#PID 값 알아내기

$ sudo kill PID
# ex)MySQL의 PID 값 : 772 
# mysql 제거

$ mkdir ~/mysql
# mysql 폴더 생성하기

$ sudo chown root ~/mysql
# 소유자를 root로 변경
$ sudo chgrp root ~/mysql
# 그룹으로 root으로 변경

$ ls -al
# 현재 디렉터리에서 목록 확인

$ docker volume create mysql-vol
# mysql-vol 생성

$ docker volume inspect mysql-vol


$ docker run -d \ 컨테이너를 백그라운드에서 실행
> --name mysql-container \ 컨테이너 이름 정하기
> -p 3306:3306 \ 호스트의 포트를 컨테이너의 포트에 매핑 
> -v ~/mysql:/etc/mysql/conf.d \ 호스트의 디렉토리를 컨테이너의 디렉토리에 마운트하여 mysql 설정 파일을 적용 가능할 수 있음
> -v mysql-vol:/var/lib/mysql \mysql-vol이라는 볼륨을 컨테이너의 디렉토리에 마운트하여 mysql 데이터가 지속적으로 저장되도록 합니다.
> -e MYSQL_ROOT_PASSWORD=root \루트 비밀번호를 root로 설정
> -e MYSQL_USER=greenit \일반 사용자 greenit를 생성함
> -e MYSQL_PASSWORD=greenit \ greenit 사용자의 비밀번호를 설정함
> -e TZ=Asia/Seoul \ 컨테이너의 시간대를 설정함
> mysql:8.0 이 버전의 Docker 이미지를 사용합니다.


$ docker exec -it <컨테이너명> /bin/bash
# 컨테이너에 접속, 쉘을 실행하고 명령어를 상호작용적으로 입력할 수 있는 환경을 제공
# 즉 컨테이너 안에서 리눅스 명령어를 실행할 수 있음

# mysql -u root -p
-mysql에 로그인 함

mysql> status
# 정보 확인

mysql> show databases;
# 관련된 데이터 확인
+--------------------+
| Database           |
+--------------------+
| db_semi            |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+

mysql> use db_semi;
# db_semi 사용

mysql> SELECT *FRO, tbl_user;
# tbl_user 확인

mysql> DESC tbl_notice;
#tbl_notice의 칼럼 확인

mysql>exit
Bye
bash-5.1# exit
exit

$ docker run -d --name tomcat-container -p 8080:8080 tomcat:9.0.98
# 톰캣 실행 및 별명 짓기 및 ip주소 설정

$ docker ps




